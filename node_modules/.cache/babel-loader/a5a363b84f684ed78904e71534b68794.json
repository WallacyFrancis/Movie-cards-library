{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);\n\nvar inspect = require('object-inspect');\n\nvar hasSymbols = require('has-symbols')();\n\nvar getIteratorMethod = require('../helpers/getIteratorMethod');\n\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\n\nvar Call = require('./Call');\n\nvar GetMethod = require('./GetMethod');\n\nvar IsArray = require('./IsArray');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/9.0/#sec-getiterator\n\n\nmodule.exports = function GetIterator(obj, hint, method) {\n  var actualHint = hint;\n\n  if (arguments.length < 2) {\n    actualHint = 'sync';\n  }\n\n  if (actualHint !== 'sync' && actualHint !== 'async') {\n    throw new $TypeError(\"Assertion failed: `hint` must be one of 'sync' or 'async', got \" + inspect(hint));\n  }\n\n  var actualMethod = method;\n\n  if (arguments.length < 3) {\n    if (actualHint === 'async') {\n      if (hasSymbols && $asyncIterator) {\n        actualMethod = GetMethod(obj, $asyncIterator);\n      }\n\n      if (actualMethod === undefined) {\n        throw new $TypeError(\"async from sync iterators aren't currently supported\");\n      }\n    } else {\n      actualMethod = getIteratorMethod({\n        AdvanceStringIndex: AdvanceStringIndex,\n        GetMethod: GetMethod,\n        IsArray: IsArray,\n        Type: Type\n      }, obj);\n    }\n  }\n\n  var iterator = Call(actualMethod, obj);\n\n  if (Type(iterator) !== 'Object') {\n    throw new $TypeError('iterator must return an object');\n  }\n\n  return iterator; // TODO: This should return an IteratorRecord\n\n  /*\n  var nextMethod = GetV(iterator, 'next');\n  return {\n  \t'[[Iterator]]': iterator,\n  \t'[[NextMethod]]': nextMethod,\n  \t'[[Done]]': false\n  };\n  */\n};","map":null,"metadata":{},"sourceType":"script"}